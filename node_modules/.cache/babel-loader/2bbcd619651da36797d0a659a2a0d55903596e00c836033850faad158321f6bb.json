{"ast":null,"code":"var _jsxFileName = \"/Users/imadjaha/MyProjects/Portfolio React/portfolio/src/components/Quotes.js\";\n// import React, { Component } from \"react\";\n// import quotesData from \"./quotes.json\";\n\n// class Quotes extends Component {\n//   constructor() {\n//     super();\n//     this.state = { quote: {}, quotes: [] };\n//     this.fetchQuotes = this.fetchQuotes.bind(this);\n//     this.hideQuotes = this.hideQuotes.bind(this);\n//   }\n\n//   componentDidMount() {\n//     // Display a random quote initially\n//     const randomIndex = Math.floor(Math.random() * quotesData.length);\n//     this.setState({ quote: quotesData[randomIndex] });\n//   }\n\n//   fetchQuotes = () => {\n//     // Fetch all quotes\n//     this.setState({ quotes: quotesData });\n//   };\n\n//   hideQuotes = () => {\n//     // Hide all quotes\n//     this.setState({ quotes: [] });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <h2>Today's Quote</h2>\n//         <p>{this.state.quote.title}</p>\n//         <hr />\n//         {this.state.quotes.length > 0 ? (\n//           <div>\n//             <h3>This Is All Available Quotes</h3>\n//             <button className=\"btn\" onClick={this.hideQuotes}>\n//               Hide Quotes\n//             </button>\n//             {this.state.quotes.map((quote) => {\n//               return <p key={quote.id}>{quote.title}</p>;\n//             })}\n//           </div>\n//         ) : (\n//           <div>\n//             <h3>Do You Want More Quotes?</h3>\n//             <button className=\"btn\" onClick={this.fetchQuotes}>\n//               Show Quotes\n//             </button>\n//           </div>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Quotes;\n\nimport React, { Component } from \"react\";\nimport quotesData from \"./quotes.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass Quotes extends Component {\n  constructor() {\n    super();\n    this.fetchQuotes = () => {\n      // Fetch all quotes\n      this.setState({\n        quotes: quotesData\n      });\n    };\n    this.hideQuotes = () => {\n      // Hide all quotes\n      this.setState({\n        quotes: []\n      });\n    };\n    this.toggleDarkMode = () => {\n      this.setState(prevState => ({\n        darkMode: !prevState.darkMode\n      }));\n    };\n    this.state = {\n      quote: {},\n      quotes: [],\n      darkMode: false\n    };\n    this.fetchQuotes = this.fetchQuotes.bind(this);\n    this.hideQuotes = this.hideQuotes.bind(this);\n    this.toggleDarkMode = this.toggleDarkMode.bind(this);\n  }\n  componentDidMount() {\n    // Display a random quote initially\n    const randomIndex = Math.floor(Math.random() * quotesData.length);\n    this.setState({\n      quote: quotesData[randomIndex]\n    });\n  }\n  render() {\n    const {\n      darkMode\n    } = this.state;\n    const containerStyle = {\n      backgroundColor: darkMode ? \"#333\" : \"#fff\",\n      color: darkMode ? \"#fff\" : \"#333\"\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      style: containerStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"dark-mode-btn\",\n        onClick: this.toggleDarkMode,\n        style: {\n          position: \"absolute\",\n          top: 10,\n          right: 10\n        },\n        children: darkMode ? \"Light Mode\" : \"Dark Mode\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Today's Quote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: this.state.quote.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), this.state.quotes.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"This Is All Available Quotes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: this.hideQuotes,\n          children: \"Hide Quotes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 13\n        }, this), this.state.quotes.map(quote => {\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            children: quote.title\n          }, quote.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 22\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Do You Want More Quotes?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          onClick: this.fetchQuotes,\n          children: \"Show Quotes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Quotes;","map":{"version":3,"names":["React","Component","quotesData","jsxDEV","_jsxDEV","Quotes","constructor","fetchQuotes","setState","quotes","hideQuotes","toggleDarkMode","prevState","darkMode","state","quote","bind","componentDidMount","randomIndex","Math","floor","random","length","render","containerStyle","backgroundColor","color","className","style","children","onClick","position","top","right","fileName","_jsxFileName","lineNumber","columnNumber","title","map","id"],"sources":["/Users/imadjaha/MyProjects/Portfolio React/portfolio/src/components/Quotes.js"],"sourcesContent":["// import React, { Component } from \"react\";\n// import quotesData from \"./quotes.json\";\n\n// class Quotes extends Component {\n//   constructor() {\n//     super();\n//     this.state = { quote: {}, quotes: [] };\n//     this.fetchQuotes = this.fetchQuotes.bind(this);\n//     this.hideQuotes = this.hideQuotes.bind(this);\n//   }\n\n//   componentDidMount() {\n//     // Display a random quote initially\n//     const randomIndex = Math.floor(Math.random() * quotesData.length);\n//     this.setState({ quote: quotesData[randomIndex] });\n//   }\n\n//   fetchQuotes = () => {\n//     // Fetch all quotes\n//     this.setState({ quotes: quotesData });\n//   };\n\n//   hideQuotes = () => {\n//     // Hide all quotes\n//     this.setState({ quotes: [] });\n//   };\n\n//   render() {\n//     return (\n//       <div>\n//         <h2>Today's Quote</h2>\n//         <p>{this.state.quote.title}</p>\n//         <hr />\n//         {this.state.quotes.length > 0 ? (\n//           <div>\n//             <h3>This Is All Available Quotes</h3>\n//             <button className=\"btn\" onClick={this.hideQuotes}>\n//               Hide Quotes\n//             </button>\n//             {this.state.quotes.map((quote) => {\n//               return <p key={quote.id}>{quote.title}</p>;\n//             })}\n//           </div>\n//         ) : (\n//           <div>\n//             <h3>Do You Want More Quotes?</h3>\n//             <button className=\"btn\" onClick={this.fetchQuotes}>\n//               Show Quotes\n//             </button>\n//           </div>\n//         )}\n//       </div>\n//     );\n//   }\n// }\n\n// export default Quotes;\n\n\n\nimport React, { Component } from \"react\";\nimport quotesData from \"./quotes.json\";\n\nclass Quotes extends Component {\n  constructor() {\n    super();\n    this.state = { quote: {}, quotes: [], darkMode: false };\n    this.fetchQuotes = this.fetchQuotes.bind(this);\n    this.hideQuotes = this.hideQuotes.bind(this);\n    this.toggleDarkMode = this.toggleDarkMode.bind(this);\n  }\n\n  componentDidMount() {\n    // Display a random quote initially\n    const randomIndex = Math.floor(Math.random() * quotesData.length);\n    this.setState({ quote: quotesData[randomIndex] });\n  }\n\n  fetchQuotes = () => {\n    // Fetch all quotes\n    this.setState({ quotes: quotesData });\n  };\n\n  hideQuotes = () => {\n    // Hide all quotes\n    this.setState({ quotes: [] });\n  };\n\n  toggleDarkMode = () => {\n    this.setState((prevState) => ({\n      darkMode: !prevState.darkMode,\n    }));\n  };\n\n  render() {\n    const { darkMode } = this.state;\n    const containerStyle = {\n      backgroundColor: darkMode ? \"#333\" : \"#fff\",\n      color: darkMode ? \"#fff\" : \"#333\",\n    };\n\n    return (\n      <div className=\"container\" style={containerStyle}>\n        <button\n          className=\"dark-mode-btn\"\n          onClick={this.toggleDarkMode}\n          style={{ position: \"absolute\", top: 10, right: 10 }}\n        >\n          {darkMode ? \"Light Mode\" : \"Dark Mode\"}\n        </button>\n        <h2>Today's Quote</h2>\n        <p>{this.state.quote.title}</p>\n        <hr />\n        {this.state.quotes.length > 0 ? (\n          <div>\n            <h3>This Is All Available Quotes</h3>\n            <button className=\"btn\" onClick={this.hideQuotes}>\n              Hide Quotes\n            </button>\n            {this.state.quotes.map((quote) => {\n              return <p key={quote.id}>{quote.title}</p>;\n            })}\n          </div>\n        ) : (\n          <div>\n            <h3>Do You Want More Quotes?</h3>\n            <button className=\"btn\" onClick={this.fetchQuotes}>\n              Show Quotes\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Quotes;\n"],"mappings":";AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,UAAU,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,MAAM,SAASJ,SAAS,CAAC;EAC7BK,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IAAC,KAaVC,WAAW,GAAG,MAAM;MAClB;MACA,IAAI,CAACC,QAAQ,CAAC;QAAEC,MAAM,EAAEP;MAAW,CAAC,CAAC;IACvC,CAAC;IAAA,KAEDQ,UAAU,GAAG,MAAM;MACjB;MACA,IAAI,CAACF,QAAQ,CAAC;QAAEC,MAAM,EAAE;MAAG,CAAC,CAAC;IAC/B,CAAC;IAAA,KAEDE,cAAc,GAAG,MAAM;MACrB,IAAI,CAACH,QAAQ,CAAEI,SAAS,KAAM;QAC5BC,QAAQ,EAAE,CAACD,SAAS,CAACC;MACvB,CAAC,CAAC,CAAC;IACL,CAAC;IA1BC,IAAI,CAACC,KAAK,GAAG;MAAEC,KAAK,EAAE,CAAC,CAAC;MAAEN,MAAM,EAAE,EAAE;MAAEI,QAAQ,EAAE;IAAM,CAAC;IACvD,IAAI,CAACN,WAAW,GAAG,IAAI,CAACA,WAAW,CAACS,IAAI,CAAC,IAAI,CAAC;IAC9C,IAAI,CAACN,UAAU,GAAG,IAAI,CAACA,UAAU,CAACM,IAAI,CAAC,IAAI,CAAC;IAC5C,IAAI,CAACL,cAAc,GAAG,IAAI,CAACA,cAAc,CAACK,IAAI,CAAC,IAAI,CAAC;EACtD;EAEAC,iBAAiBA,CAAA,EAAG;IAClB;IACA,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGnB,UAAU,CAACoB,MAAM,CAAC;IACjE,IAAI,CAACd,QAAQ,CAAC;MAAEO,KAAK,EAAEb,UAAU,CAACgB,WAAW;IAAE,CAAC,CAAC;EACnD;EAkBAK,MAAMA,CAAA,EAAG;IACP,MAAM;MAAEV;IAAS,CAAC,GAAG,IAAI,CAACC,KAAK;IAC/B,MAAMU,cAAc,GAAG;MACrBC,eAAe,EAAEZ,QAAQ,GAAG,MAAM,GAAG,MAAM;MAC3Ca,KAAK,EAAEb,QAAQ,GAAG,MAAM,GAAG;IAC7B,CAAC;IAED,oBACET,OAAA;MAAKuB,SAAS,EAAC,WAAW;MAACC,KAAK,EAAEJ,cAAe;MAAAK,QAAA,gBAC/CzB,OAAA;QACEuB,SAAS,EAAC,eAAe;QACzBG,OAAO,EAAE,IAAI,CAACnB,cAAe;QAC7BiB,KAAK,EAAE;UAAEG,QAAQ,EAAE,UAAU;UAAEC,GAAG,EAAE,EAAE;UAAEC,KAAK,EAAE;QAAG,CAAE;QAAAJ,QAAA,EAEnDhB,QAAQ,GAAG,YAAY,GAAG;MAAW;QAAAqB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAChC,CAAC,eACTjC,OAAA;QAAAyB,QAAA,EAAI;MAAa;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtBjC,OAAA;QAAAyB,QAAA,EAAI,IAAI,CAACf,KAAK,CAACC,KAAK,CAACuB;MAAK;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC/BjC,OAAA;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EACL,IAAI,CAACvB,KAAK,CAACL,MAAM,CAACa,MAAM,GAAG,CAAC,gBAC3BlB,OAAA;QAAAyB,QAAA,gBACEzB,OAAA;UAAAyB,QAAA,EAAI;QAA4B;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACrCjC,OAAA;UAAQuB,SAAS,EAAC,KAAK;UAACG,OAAO,EAAE,IAAI,CAACpB,UAAW;UAAAmB,QAAA,EAAC;QAElD;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACR,IAAI,CAACvB,KAAK,CAACL,MAAM,CAAC8B,GAAG,CAAExB,KAAK,IAAK;UAChC,oBAAOX,OAAA;YAAAyB,QAAA,EAAmBd,KAAK,CAACuB;UAAK,GAAtBvB,KAAK,CAACyB,EAAE;YAAAN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAkB,CAAC;QAC5C,CAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,gBAENjC,OAAA;QAAAyB,QAAA,gBACEzB,OAAA;UAAAyB,QAAA,EAAI;QAAwB;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjCjC,OAAA;UAAQuB,SAAS,EAAC,KAAK;UAACG,OAAO,EAAE,IAAI,CAACvB,WAAY;UAAAsB,QAAA,EAAC;QAEnD;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAEV;AACF;AAEA,eAAehC,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}